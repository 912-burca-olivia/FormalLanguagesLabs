%{ 	 
#include <math.h> 
#include <stdio.h>
#include <stdlib.h>
#include "lang.tab.h"
int nrLines = 0;
%} 

%option noyywrap

CONSTANT_STRING		\"[a-zA-Z0-9]*\"
CONSTANT_NUMBER		0|[+|-]?[1-9][0-9]*([.][0-9]*)?|[+|-]?0[.][0-9]* 
CONSTANT_CHARACTER 	\'[a-zA-Z0-9]\'
IDENTIFIER	[a-zA-Z][a-zA-Z0-9]*

%%

read        {printf( "Reserved word: %s\n", yytext); return READ;}
print	    {printf( "Reserved word: %s\n", yytext); return PRINT;}
if	       { printf( "Reserved word: %s\n", yytext); return IF;}
else	    { printf( "Reserved word: %s\n", yytext); return ELSE;}
while	    { printf( "Reserved word: %s\n", yytext); return WHILE;}
int	    { printf( "Reserved word: %s\n", yytext); return INT;}
string    {    printf( "Reserved word: %s\n", yytext); return STRING;}
char  	{ printf( "Reserved word: %s\n", yytext); return CHAR;}
unsigned	 { printf( "Reserved word: %s\n", yytext); return UNSIGNED;}
float	    { printf( "Reserved word: %s\n", yytext); return FLOAT;}
program { printf( "Reserved word: %s\n", yytext); return PROGRAM;}

{IDENTIFIER}	{ printf( "Identifier: %s\n", yytext); return IDENTIFIER;}

{CONSTANT_NUMBER} 	{printf( "A number: %s (%d)\n", yytext, atof( yytext ) ); return CONSTANT_NUMBER;  }

{CONSTANT_STRING}		{printf("A string: %s\n", yytext); return CONSTANT_STRING;}

{CONSTANT_CHARACTER}	{printf("A character: %s\n", yytext); return CONSTANT_CHARACTER;}


"+"	    {printf( "Operator: %s\n", yytext ); return PLUS;}
"-"	    {printf( "Operator: %s\n", yytext ); return MINUS;}
"*"	    {printf( "Operator: %s\n", yytext ); return MUL;}
"/"	    {printf( "Operator: %s\n", yytext ); return DIV;}
"%"	    {printf( "Operator: %s\n", yytext ); return MOD;}
"<"	    {printf( "Operator: %s\n", yytext ); return LT;}
">"	    {printf( "Operator: %s\n", yytext ); return GT;}
"<="	    {printf( "Operator: %s\n", yytext ); return LET;}
">="	    {printf( "Operator: %s\n", yytext ); return GET;}
"!="	{printf( "Operator: %s\n", yytext ); return NOT_EQUAL;}
"=="	{printf( "Operator: %s\n", yytext ); return EQUAL;}
"!"	    {printf( "Operator: %s\n", yytext ); return NOT;}

"="	    {printf( "Separator: %s\n", yytext ); return ASSIGN;}
";"	    {printf( "Separator: %s\n", yytext ); return SEMI_COLON;}
","	    {printf( "Separator: %s\n", yytext ); return COMMA;}
"{"	    {printf( "Separator: %s\n", yytext ); return OPEN_CURLY_BRACKET;}
"}"	    {printf( "Separator: %s\n", yytext ); return CLOSED_CURLY_BRACKET;}
"("	    {printf( "Separator: %s\n", yytext ); return OPEN_ROUND_BRACKET;}
")"	    {printf( "Separator: %s\n", yytext ); return CLOSED_ROUND_BRACKET;}

[ \t]+ {}
[\n]+ {nrLines ++;}
		 
[0-9]+[a-zA-Z_]+[a-zA-Z0-9_]*   {printf("Illegal identifier\n"); return -1;}
\'[a-zA-Z0-9]{2,}\'             {printf("Character of length >=2 at line\n"); return -1;}
.                               {printf("Lexical error\n"); return -1;}
%% 

 