The Finite Automaton is structured as a class having:
- states: a finite set of states
- alphabet: a finite set of input symbols
- initial state: the initial or start state
- final states: a set of final states
- transitions: a set of state transitions represented as a dictionary with pairs of start states and input symbols as
keys, and the destination state as value

Methods:

- validate():
    """
    Validates that the states from the set of final states, the initial state, and the starting states
    and destination states from the transitions are valid and a part of the finite set of states.
    :param states: The states
    :param alphabet: The alphabet
    :param q0: The initial state
    :param F: The final states
    :param transitions: The transitions
    :return:
    """

- checkIfDFA():
    """
    A FA is DFA if corresponding to an input symbol, there is single resultant state (there is only
     one transition). This method goes through all the keys in the transitions dictionary and
     checks if there is a list with more than one element.
    :return: True if DFA, False otherwise.
    """

- checkIfSequenceAccepted():
    """
    This method uses the Finite Automata to check if a sequence is accepted by it.
    We iterate through the symbols from the sequence and check if it can be reached
    by following the transitions. Also, it must end in a final state.
    :param sequence: The sequence
    :return: True if accepted or False otherwise
    """